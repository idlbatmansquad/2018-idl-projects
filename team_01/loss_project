import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.datasets import mnist
from keras.utils import np_utils

# load data
(X_train, y_train), (X_test, y_test) = mnist.load_data()
# reshape to be [samples][width][height][channels]
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')
# normalize inputs from 0-255 to 0-1
X_train = X_train / 255.
X_test = X_test / 255.
print(X_train.shape)

y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]

#We first try with the categorical crossentropy loss function
model = Sequential()
model.add(Conv2D(32, (5, 5), input_shape=(28, 28, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
scores_vector = []
for iteration in range(0,9):
    model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=200, verbose=0)
    scores = model.evaluate(X_test, y_test, verbose=0)
    scores_vector.append((100-scores[1]*100))
    print("Baseline Error: %.2f%%" % (100-scores[1]*100))
    
print("Mean value upon 10 iterations: " + str(np.mean(scores_vector)))
print("Standard Deviation upon 10 iterations: " + str(np.std(scores_vector)))

#Now we try with the MSE loss function
model = Sequential()
model.add(Conv2D(32, (5, 5), input_shape=(28, 28, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))
model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])
scores_vector = []
for iteration in range(0,9):
    model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=200, verbose=0)
    scores = model.evaluate(X_test, y_test, verbose=0)
    scores_vector.append((100-scores[1]*100))
    print("Baseline Error: %.2f%%" % (100-scores[1]*100))
    
print("Mean value upon 10 iterations: " + str(np.mean(scores_vector)))
print("Standard Deviation upon 10 iterations: " + str(np.std(scores_vector)))

#We observe both results, we conclude the Mean Squared Error is a better loss function in this case as it gives a lower mean.
